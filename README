Connectome File Format Library

Multi-Modal Neuroimaging Python Library for Data Input / Output and interlinking for

* metadata (XML)
* networks (GraphML, GEXF)
* surfaces (Gifti)
* volumes (Nifti)
* fiber tracks (TrackVis)
* time series (HDF5)

Generate classes with: 
python /home/stephan/Dev/Python/generateDS-2.1a/generateDS.py --subclass-suffix="" -f --super="cff" -o /home/stephan/Dev/PyWorkspace/cfflib/schema/gen/cff.py -s /home/stephan/Dev/PyWorkspace/cfflib/schema/gen/cfflib.py /home/stephan/Dev/PyWorkspace/cfflib/schema/connectome.xsd

Documentation:
http://www.rexx.com/~dkuhlman/generateDS.html

Load a meta.xml file::

	import cfflib
	a = cfflib.parse('/home/stephan/Dev/PyWorkspace/cfflib/datasets/meta.xml')

Export the file::

	f = open('output.xml', 'w')
	f.write('<?xml version="1.0" encoding="UTF-8"?>\n')
	a.export(f, 0, namespacedef_='xmlns="http://www.connectomics.ch/2010/Connectome/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.connectomics.ch/2010/Connectome/xmlns connectome.xsd"')
	f.close()
	

Dependencies
------------

* Nibabel
* numexpr
* PyTables
* NumPy
* lxml
* pygexf

Think
-----

* how to have accessor methods but using top-level connectome. need a backlink?

* .load cff
  -> create connectome object in memory. lazy load object with corresponding get_object() (vs. load_object() and then access) using
     corresponding libraries
  -> 
     
* .save cff
  -> give connectome object in memory and out_fname. create a zip/cff file. add data
     -> first create meta.xml in tmp, add it and remove
     -> loop through data
        -> if location=='zippath':
              if loaded in memory:
              	using library, write out object in /tmp, add it and remove it in /tmp
              else:
                you do not want to require to load all the files in memory to save the cff, thus
                add a special insert_..(modify it?) or add_object(?..) or insert_from_filesystem_without_loading
                
                ?? csurf_obj = cfflib.CSurface(....., from_file='/.../my.gii')
                    # from_file generate a _src attribute that stores the fs path, to be used for saving
                   cfile.connectome_surface.append(csurf_obj)

gexf io for networkx, e.g. using libexpat
* rewrite the pygexf to use networkx graphs
* http://gexf.net/format/schema.html

In cfflib
---------
* see util.py

* [METHOD] validate file existence
* [METHOD] validate file type

* e.g. in a python-script, write: import cfflib
* lazy loading data

* [METHOD] adder (=setter?) methods for objects (or just add to a list?)
* [METHOD] remover methods for objects (or just remove from a list?)
* [METHOD] info method about available optional dependencies
* [METHOD] .save / .load cff

* [METHOD] meaningful getter method for objects based on meta-data attributes (for all kinds of data types)

* [METHOD] load all data into memory
* load scripts as stringIO / string object
* lazy load, lazy memorymap load?

Between datatype mapping
------------------------

link to hdf?
* time series (ts) on nodes only -> directly as hdf tag? n x t
* edges ones e x t
* surface vertices, v x t
* surface faces, v x t
* network to HDF: hdffilename:/group/group/dsetarray[:,0]
